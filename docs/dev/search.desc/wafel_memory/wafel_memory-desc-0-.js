searchState.loadedDescShard("wafel_memory", 0, "Abstractions for reading and writing values to game memory.\nMemory management for a loaded DLL and backup slots.\nA slot for DllGameMemory.\nA read-only view of both static and non-static memory, …\nA read-write view of both static and non-static memory, …\nA read-only view of shared static memory.\nImplementation of SymbolLookup that always returns None.\nMemory view for reading/writing to a running emulator.\nA trait that allows accessing game memory and …\nTrait for a view of memory that allows reading values by …\nTrait for a view of memory that allows writing values by …\nMemory view for reading/writing into an libsm64 instance …\nA buffer that can hold a copy of non-static memory.\nA read-only view of both static and non-static memory, …\nA read-write view of both static and non-static memory, …\nA read-only view of shared static memory.\nTrait for looking up a symbol’s address.\nAdvance the base slot by one frame.\nAttach to a running emulator and return an EmuMemory …\nAttach to a running process which has loaded the given DLL …\nReturn the base address of the DLL instance in memory.\nCopy data from one slot to another.\nAllocate a new backup slot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the slot is the base slot for its …\nReturn true if a process with the given pid is currently …\nReturn true if a process with the given pid is currently …\nLoad a DLL and return a DllGameMemory and its base slot.\nReturn the int type corresponding to a pointer (either U32 …\nRead a pointer from the given address.\nRead a pointer from the given address.\nRead an array of pointers from the given address.\nRead an f32 from the given address.\nRead an f32 from the given address.\nRead an array of f32s from the given address.\nRead an array of f32s from the given address.\nRead an f64 from the given address.\nRead an f64 from the given address.\nRead an array of f64s from the given address.\nRead an array of f64s from the given address.\nRead a float from the given address.\nRead a float from the given address.\nRead an i16 from the given address.\nRead an i16 from the given address.\nRead an array of i16s from the given address.\nRead an array of i16s from the given address.\nRead an i32 from the given address.\nRead an i32 from the given address.\nRead an array of i32s from the given address.\nRead an array of i32s from the given address.\nRead an i64 from the given address.\nRead an i64 from the given address.\nRead an array of i64s from the given address.\nRead an array of i64s from the given address.\nRead an i8 from the given address.\nRead an i8 from the given address.\nRead an array of i8s from the given address.\nRead an array of i8s from the given address.\nRead an int from the given address.\nRead an int from the given address.\nRead a null terminated C string from the given address.\nRead a null terminated C string from the given address.\nRead a u16 from the given address.\nRead a u16 from the given address.\nRead an array of u16s from the given address.\nRead a u32 from the given address.\nRead a u32 from the given address.\nRead an array of u32s from the given address.\nRead a u64 from the given address.\nRead a u64 from the given address.\nRead an array of u64s from the given address.\nRead a u8 from the given address.\nRead a u8 from the given address.\nRead an array of u8s from the given address.\nReturn a read-only view of shared static memory.\nLook up a symbol’s address.\nLooks up a symbol for the underlying DLL.\nReturn a read-only view of both static and non-static …\nReturn a read-write view of both static and non-static …\nWrite a pointer value at the given address.\nWrite a pointer value at the given address.\nWrite an array of pointer values at the given address.\nWrite an f32 to the given address.\nWrite an f32 to the given address.\nWrite an array of f32s to the given address.\nWrite an array of f32s to the given address.\nWrite an f64 to the given address.\nWrite an f64 to the given address.\nWrite an array of f64s to the given address.\nWrite an array of f64s to the given address.\nWrite a float at the given address.\nWrite a float at the given address.\nWrite an i16 to the given address.\nWrite an i16 to the given address.\nWrite an array of i16s to the given address.\nWrite an array of i16s to the given address.\nWrite an i32 to the given address.\nWrite an i32 to the given address.\nWrite an array of i32s to the given address.\nWrite an array of i32s to the given address.\nWrite an i64 to the given address.\nWrite an i64 to the given address.\nWrite an array of i64s to the given address.\nWrite an array of i64s to the given address.\nWrite an i8 to the given address.\nWrite an i8 to the given address.\nWrite an array of i8s to the given address.\nWrite an array of i8s to the given address.\nWrite an int at the given address.\nWrite an int at the given address.\nWrite a u16 to the given address.\nWrite a u16 to the given address.\nWrite an array of u16s to the given address.\nWrite a u32 to the given address.\nWrite a u32 to the given address.\nWrite an array of u32s to the given address.\nWrite a u64 to the given address.\nWrite a u64 to the given address.\nWrite an array of u64s to the given address.\nWrite a u8 to the given address.\nWrite a u8 to the given address.\nWrite an array of u8s to the given address.")