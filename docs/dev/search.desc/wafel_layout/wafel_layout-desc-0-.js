searchState.loadedDescShard("wafel_layout", 0, "Defines a mapping from global variables to types/values.\nA constant’s value and source.\nThe source for a constant value.\nA description of accessible variables and types.\nDebugging and structural information extracted from a DLL.\nA segment defined in the DLL.\nThe constant is defined as an enum variant.\nA global variable or function.\nThe constant is defined as a macro.\nLoad hardcoded SM64 data into the data layout.\nThe relative address of the variable, if known.\nReturns the DLL path, adding lib prefix or .so/.dll suffix …\nRecursively look up a type name.\nRecursively look up all type names in the given type.\nLook up the value of a constant.\nThe values of integer constants.\nThe data layout for the DLL.\nLook up the definition of a type name.\nThe type of the global variable.\nLook up the definition of a type name.\nReturn the segments which might contain mutable data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLook up a global variable or function.\nThe types of global variables and functions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the layout for SM64 on the N64, including data …\nThe name of the segment.\nCreate an empty data layout.\nConstruct a DllLayout from the DWARF debugging information …\nLoad segment definitions from the DLL.\nThe segments defined in the DLL.\nThe source for the constant.\nThe definitions of structs, unions, and typedefs.\nThe integer value for the constant.\nThe virtual address that the segment is loaded to.\nThe size that the segment has when loaded into memory.\nThe name of the enum, or None for an anonymous enum.")