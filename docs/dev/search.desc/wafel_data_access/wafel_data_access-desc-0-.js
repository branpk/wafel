searchState.loadedDescShard("wafel_data_access", 0, "Reading and writing structured data to memory.\nEither a global or a local data path.\nAn operation that is applied when evaluating a data path.\nInternal representation of a global or local data path.\nTrait for Rust types that can be read from memory.\nA type that knows how to read a structured value from …\nA readable/writable type that can be used in an array …\nTrait for Rust types that can be written to memory.\nA type that knows how to write a structured value to …\naddr -&gt; *addr\nA global data path.\nA data path starting from a global variable address.\nA local data path.\nA data path starting from a type, such as a specific …\nA trait for looking up the structured layout of data in …\nBasic implementation of MemoryLayout.\nIf the value calculated so far is null, return Value::None.\naddr -&gt; addr + offset\nShorthand for the Reader of a DataReadable.\nThe reader for the type.\nThe type of value that is read from memory.\nThe type of value that is written to memory.\nShorthand for the Writer of a DataWritable.\nThe writer for the type.\nEvaluate the path and return the address of the variable.\nReturn the name of the global variable at the given …\nCompile a global data path from source.\nCompile a local data path from source.\nCompile a data path from source.\nConcatenate a global and local path.\nConcatenate two local paths.\nGet the concrete data type that the path points to.\nGet the concrete data type that the path points to.\nGet the concrete data type that the path points to.\nThe type of the value that the path points to.\nThe concrete type for each type name that appears in the …\nReturn the layout of data types and globals.\nReturns a DataReader for reading a Value of a given type.\nReturns a DataReader for reading a Value of a given type.\nThe operations to perform when evaluating the path.\nReturn the field offset for a path of the form <code>struct A.x</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCompile a global data path, cached.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to convert into a <code>GlobalDataPath</code>.\nTry to convert into a <code>LocalDataPath</code>.\nCompile a local data path, cached.\nThe mask to apply for an integer variable.\nConstruct a new MemoryLayoutImpl.\nReturn the size in bytes of a pointer (4 or 8).\nRead the value from memory at the given address.\nEvaluate the path and return the value stored in the …\nConstruct a reader using the given layout.\nThe root for the path (either a global variable address or …\nGet the path’s root data type.\nGet the source for the path.\nThe original source for the data path.\nThe stride of an array of this type of value.\nLook up a symbol in memory.\nWrite the value to memory at the given address.\nEvaluate the path and write <code>value</code> to the variable.\nConstruct a writer using the given layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")