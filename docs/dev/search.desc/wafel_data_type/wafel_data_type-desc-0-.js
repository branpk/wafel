searchState.loadedDescShard("wafel_data_type", 0, "Representation of Wafel data types and values, mostly …\nA raw pointer value that can be stored in memory.\nAn address value.\nA 16 bit signed angle.\nAn array type, optionally with a length.\nAn array value.\nA representation of a C data type.\nA reference to a <code>DataType</code>.\n32 bit float\n64 bit float\nA field in a struct or union.\nA float type.\nA float value, regardless of the underlying <code>FloatType</code> size.\nFloat types of different sizes.\nAn integer value.\nAn integer type.\nAn integer value, regardless of the underlying <code>IntType</code> …\nInteger types of different sizes and signedness.\nAn integer value.\nThe NULL address.\nA symbolic reference to a type definition, e.g. <code>struct Foo</code>.\nThe C type namespaces.\nRepresents the lack of a value.\nA pointer type.\n16 bit signed int\n32 bit signed int\n64 bit signed int\n8 bit signed int\nA string value.\nA struct type.\nTypes defined using <code>struct A { ... }</code>.\nA struct value.\nA symbolic reference to a type definition, e.g. <code>struct Foo</code>.\nTypes defined using <code>typedef ... A</code>.\n16 bit unsigned int\n32 bit unsigned int\n64 bit unsigned int\n8 bit unsigned int\nA union type.\nTypes defined using <code>union A { ... }</code>.\nA dynamically typed value.\nA wrapper around Value that provides a different …\nVoid, typically used as a pointer target or function …\nConvert the value to an address, panicking on failure.\nConvert the value to an array and return its elements, …\nConvert the value to an array and return its elements, …\nConvert the value to a float, and then truncate to an f32, …\nConvert the value to an array of three f32s, panicking on …\nConvert the value to a float, panicking if the value is …\nConvert the value to a usize, allowing in-range integers.\nConvert the value to an array of three i16s, panicking on …\nConvert the value to an int, panicking if it is not an int.\nConvert the value to an int, allowing in-range floats that …\nPanic if the value is not <code>Value::None</code>.\nConvert the value to a string, panicking on failure.\nConvert the value to a struct and return its fields, …\nConvert the value to a usize, panicking on failure.\nThe type of the field.\nConvert the value to a struct and look up the field with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the data type is an array type.\nReturn true if the data type is a float type.\nReturn true if the data type is an integer type.\nReturn true if the data type is a type name.\nReturn true if the value is <code>Value::None</code>.\nReturns true if the address is not null (equal to zero).\nReturns true if the address is null (equal to zero).\nReturn true if the data type is a pointer type.\nReturn true if the data type is a struct type.\nReturn true if the data type is a union type.\nReturn true if the data type is void.\nThe raw name of the type.\nThe namespace that the type name blongs to.\nReturn a struct type name.\nReturn a typedef type name.\nReturn a union type name.\nThe byte offset within the struct or union.\nReturn None if the value is none, and Some(self) otherwise.\nNon-recursive version of data types that can be resolved …\nReturns a signed int type with the given size in bytes.\nThe size of the int in bytes.\nThe size of the float in bytes.\nReturn the stride for an array or pointer type.\nLook up a field by name in a struct type.\nConvert the value to an address.\nConvert the data type to an array type.\nConvert the value to an array and return its elements.\nConvert the value to an array and return its elements.\nConvert the value to a float and then truncate to an f32.\nConvert the value to an array of three f32s.\nConvert the data type to a float type.\nConvert the value to a float.\nConvert the value to a float, allowing in-range integers.\nConvert the value to an array of three i16s.\nConvert the data type to an int type.\nConvert the value to an int.\nConvert the value to an int, allowing in-range floats that …\nConvert the data type to a type name.\nReturn an error if the value is not <code>Value::None</code>.\nConvert the data type to a pointer type.\nConvert the value to a string.\nConvert the data type to a struct type.\nConvert the value to a struct and return its fields.\nConvert the data type to a union type.\nConvert the value to a usize.\nReturn an error if the data type is not void.\nConvert the value to a struct and look up the field with …\nAn unsigned IntType with the same size as native usize.\nReturns an unsigned int type with the given size in bytes.\nThe type being pointed to.\nThe element type.\nThe fields contained in the struct.\nThe fields contained in the union.\nThe length of the array, if known.\nThe size of the type being pointed to, if known.\nThe size of the element type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")