searchState.loadedDescShard("wafel_core", 0, "Rust code for Wafel.\nError definitions.\nGeometric types and functions.\nUI and game scene rendering.\nSM64-specific Python API for Wafel.\nSM64-specific utilities and data access.\nAn error with extra context.\nThe backtrace for the error.\nThe backtrace for the error.\nThe root source of the error.\nThe root source of the error.\nConvert the cause into another type.\nAdd additional context to the error.\nThe additional context for the error.\nThe additional context for the error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the error’s cause.\n4x4 f32 matrix\nf32 point of length 3\nWrapper type, mainly for Pod and pyo3 conversion …\nWrapper type, mainly for Pod and pyo3 conversion …\nWrapper type, mainly for Pod and pyo3 conversion …\nWrapper type, mainly for Pod and pyo3 conversion …\nf32 vector of length 3\nf32 vector of length 4\nThe coordinates of this point, i.e., the shift from the …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nConvert a direction to its pitch and yaw in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a pitch and yaw in radians to a direction.\nThe main font texture.\nA single draw command.\nAn imgui command list, which consists of commands that use …\nInitial configuration for imgui draw lists.\nThe draw data for one frame.\nA renderer for imgui frame data.\nA renderer for the game views.\nWrapper for VizRenderer that renders multiple scenes.\nThe clip rectangle in screen coordinates.\nThe command lists to draw.\nThe commands in this list.\nThe number of indices.\nThe RGBA32 data for the font texture.\nThe height in pixels of the font texture.\nThe width in pixels of the font texture.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe bytes of the index buffer.\nThe size of an index element (2 for ushort or 4 for uint).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a renderer with the given config.\nInitialize the renderer.\nCreate a VizContainer.\nRender the given draw data.\nRender the given scenes.\nRender the given viz scenes.\nRepresentation of the state of the game for the purposes …\nThe texture to use (must equal <code>IMGUI_FONT_TEXTURE_ID</code>).\nThe bytes of the vertex buffer.\nThe offset of color in the vertex struct.\nThe offset of position in the vertex struct.\nThe size of a vertex element.\nThe offset of tex coord in the vertex struct.\nA 2D overhead view.\nA 2D overhead view camera.\nA camera used to render a scene.\nNormal is pointing somewhat downward.\nNormal is pointing somewhat upward.\nSM64 object data used for rendering.\nInfo about an object’s movement over the course of …\nA single node in an object path, with information for a …\nA single quarter step within a frame.\nA 3D rotational camera.\nA 3D rotational camera.\nAn object representing the state of the game for the …\nSM64 surface data used for rendering.\nAn SM64 surface type, based on the game’s definitions.\nA rectangular viewport in screen coordinates.\nNormal is almost horizontal and points more in the X …\nNormal is almost horizontal and points more in the Z …\nThe bird’s eye or rotational camera to use.\nThe y FOV in radians.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the camera as a python object.\nThe height in pixels.\nThe surfaces that have been hidden by the user (indices …\nThe physical hitbox height of the object.\nThe physical hitbox radius of the object.\nThe surface to highlight because the mouse cursor is above …\nThe intended position of the step before surface …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an empty scene.\nCreate a viewport with zero values.\nCreate a new camera with zero values.\nCreate a camera with zero values.\nCreate an empty quarter step node.\nThe list of nodes along the path, in chronological order.\nThe surface’s normal vector.\nThe detailed paths of object movement across multiple …\nThe SM64 objects to render.\nGet the camera’s facing pitch.\nThe position of the camera.\nThe position of the camera.\nThe position of the object.\nThe object’s position at the start of the frame.\nThe quarter steps that occurred during the frame (i.e. …\nThe final position of the step.\nThe index into <code>nodes</code> that is considered the focus (i.e. …\nSet the camera from a python object.\nConvenience method to set the quarter steps for a single …\nWhether to draw the camera’s focus point (RotateCamera …\nThe world space distance covered by the vertical span of …\nThe SM64 surfaces to render.\nThe point that the camera is focusing on.\nThe type of the surface.\nThe surface’s vertices.\nThe viewport in screen coordinates where the scene should …\nThe size of wall hitboxes. Setting this to 0 disables them.\nThe width in pixels.\nThe left x coordinate.\nThe upper y coordinate.\nGet the camera’s facing yaw.\nUtility for updating imgui keys.\nAn opaque representation of a memory address.\nThe joystick’s state after removing the dead zone and …\nInformation about a variable edit range.\nThis autogenerated function is called by the python …\nThe joystick’s state as stored in the mario struct.\nAn opaque representation of an object behavior.\nAn abstraction for reading and writing variables.\nAn abstract game variable.\nRender data for wafel_viz\nReturn a map from mario action values to human readable …\nPerform housekeeping to improve scrolling near hotspots.\nBegin a drag operation starting at <code>source_variable</code>.\nReturn the set of currently loaded frames for debugging …\nReturn the size of the data cache in bytes.\nDelete the state at the given frame, shifting edits …\nThe end frame of the range (exclusive).\nFind the edit range containing a variable, if present.\nGet the frame for the variable.\nGet the wafel frame log for a frame of gameplay.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a variable from bytes.\nHandle a winit window event.\nThe id of the range.\nInsert a new state at the given frame, shifting edits …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the variable is a bit flag.\nReturn true if the variable has a float data type.\nReturn true if the variable has an integer data type.\nReturn the label for the variable if it has one.\nLoad a new pipeline using the given DLL.\nLoad a new pipeline using the given DLL, reusing the edits …\nProvides access to the log file.\nAdjusted magnitude, [0, 64].\nIntended magnitude, normally [0, 32].\nGet the name of the variable.\nInitialize a new <code>ImguiInput</code>.\nCreate a variable with the given name with no associated …\nConstructor.\nConstructor.\nReturn the number of frame advances since the timeline was …\nReturn the number of slot copies since the timeline was …\nGet the object slot for the variable.\nGet the object behavior for an object, or None if the …\nGet the object behavior for the variable.\nGet a human readable name for the given object behavior, …\nOpen a window, call <code>update_fn</code> on each frame, and render …\nOpen a window, call <code>update_fn</code> on each frame, and render …\nGet the address for the given path.\nRead from the given path.\nRead a variable.\nAdd an object path for mario to the scene, using the given …\nLoad the SM64 objects from the game state and add them to …\nRead a null terminated byte string from the given address …\nLoad the SM64 surfaces from the game state and add them to …\nEnd the drag operation, committing range changes.\nRender the game for wafel_viz using <code>config_json</code> for …\nReset a variable.\nUpdate delta time for a frame.\nSet the display size for a frame.\nSet a hotspot, allowing for faster scrolling near the …\nInitialize the imgui key map.\nThe start frame of the range (inclusive).\nIn-game calculation converting adjusted stick to intended.\nReturn the raw stick value whose adjusted stick is closest …\nFind a raw josytick value that approximately maps to the …\nIn-game calculation converting raw stick inputs to …\nGet the surface slot for the variable.\nSerialize a variable to bytes.\nTrace a ray until it hits a surface, and return the surface…\nDrag from <code>source_variable</code> to <code>target_frame</code>.\nThe value that is applied to the range.\nReturn a copy of the variable but associated with the …\nReturn a copy of the variable but associated to the given …\nReturn a copy of the variable but associated to the given …\nReturn a copy of the variable but associated to the given …\nReturn a copy of the variable but without an associated …\nReturn a copy of the variable but without an associated …\nReturn a copy of the variable but without an associated …\nReturn a copy of the variable but without an associated …\nWrite a variable.\nAdjusted stick x.\nAdjusted stick y.\nIntended yaw in world space.\nPrint a debug message.\nPrint a debug message.\nPrint an error.\nPrint an error.\nPrint an info message.\nPrint an info message.\nPrint a warning.\nPrint a warning.\nThe joystick’s state after removing the dead zone and …\nA range of contiguous cells in a single column which are …\nA unique identifier for an edit range.\nThe joystick’s state as stored in the mario struct.\nAn opaque wrapper for an object behavior pointer.\nA wrapper for an object slot index.\nAn abstraction for reading and writing variables.\nManages all of the active edit ranges.\nA wrapper for a surface slot index.\nAn abstract game variable, typically corresponding to a …\nBegin a drag operation in <code>column</code> starting at <code>source_frame</code>.\nGet the data variables for this pipeline.\nDelete the state at the given frame, shifting edits …\nDelete a frame, shifting all lower frames upward.\nFind the edit range containing a cell.\nThe frame that the variable is taken on.\nThe frames included in the range.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe id of the range.\nReturn the set of operations needed to initialize the edit …\nInsert a new state at the given frame, shifting edits …\nInsert a frame, shifting all lower rows downward.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestroy the pipeline, returning its variable edits.\nReturn true if the variable is a bit flag.\nReturn true if the variable has a float data type.\nReturn true if the variable has an integer data type.\nReturn the label for the variable if it has one.\nAdjusted magnitude, [0, 64].\nIntended magnitude, normally [0, 32].\nThe internal name of the variable.\nAn empty set of edit ranges.\nCreate a variable with the given name with no associated …\nThe object slot for object variables.\nGet the behavior address for an object.\nThe accepted object behavior for object variables.\nGet a human readable name for the given object behavior, …\nGet the data path for an object, or None if the object is …\nLoad the SM64 objects from the game state and add them to …\nLoad the SM64 surfaces from the game state and add them to …\nEnd the drag operation, committing range changes.\nReset the value for a given cell.\nIn-game calculation converting adjusted stick to intended.\nReturn the raw stick value whose adjusted stick is closest …\nFind a raw josytick value that approximately maps to the …\nIn-game calculation converting raw stick inputs to …\nThe surface slot for surface variables.\nGet the data path for a surface, or None if the surface is …\nGet the timeline for this pipeline.\nGet the timeline for this pipeline.\nTrace a ray until it hits a surface, and return the surface…\nTrace a ray until it hits a surface, and return the surface…\nBegin a drag operation starting at <code>source_variable</code>.\nFind the edit range containing a variable, if present.\nGet the frame for the variable.\nCreate a new pipeline using the given libsm64 DLL.\nGet the object slot for the variable.\nGet the object behavior for an object, or None if the …\nRead a variable.\nEnd the drag operation, committing range changes.\nReset a variable.\nOverwrite all edits with the given edits.\nGet the surface for the variable.\nDrag from <code>source_variable</code> to <code>target_frame</code>.\nWrite a variable.\nDrag from <code>source_variable</code> to <code>target_frame</code>.\nThe value that each variable in the range is edited to.\nGet the variables in the given group.\nReturn a copy of the variable but associated with the …\nReturn a copy of the variable but associated to the given …\nReturn a copy of the variable but associated to the given …\nReturn a copy of the variable but associated to the given …\nReturn the edit ranges definitions without the interactive …\nReturn a copy of the variable but without an associated …\nReturn a copy of the variable but without an associated …\nReturn a copy of the variable but without an associated …\nReturn a copy of the variable but without an associated …\nEdit the value of a given cell.\nAdjusted stick x.\nAdjusted stick y.\nIntended yaw in world space.")