searchState.loadedDescShard("wafel_timeline", 0, "The Wafel timeline algorithm, which allows its TAS rewind …\nError type if the controller fails to apply edits.\nApplies edits at the end of each frame to control the game.\nAn implementation of the Wafel timeline algorithm.\nA set of frames that should be invalidated after a …\nNo frames need to be invalidated.\nInvalidate states at and after the given frame.\nApply edits to the given state.\nPerform housekeeping to improve scrolling near hotspots.\nReturn the currently loaded frames for debugging purposes.\nSet <code>self</code> to None.\nReturn an immutable reference to the underlying controller.\nDelete a hotspot with the given name, if it exists.\nReturn the earliest error that is encountered in the …\nReturn a slot holding the state for the given frame, and …\nReturn a slot holding the state for the given frame.\nReturn a mutable slot holding the state for the given …\nReturn a mutable slot holding the state for the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInclude <code>frame</code> in the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestruct into the memory, base slot, and controller.\nInvalidate a frame and all frames after it.\nReturn a reference to the underlying game memory.\nConstruct a new GameTimeline.\nSet a hotspot with a given name.\nThe union of two sets of frames.\nMake changes to the underlying controller.")