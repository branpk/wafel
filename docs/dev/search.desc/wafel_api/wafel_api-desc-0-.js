searchState.loadedDescShard("wafel_api", 0, "The main SM64 API for Wafel.\nA raw pointer value that can be stored in memory.\nAn address value.\nA 16 bit signed angle.\nAn array type.\nAn array value.\nA simplified description of a variable’s data type.\nPAL version.\nAn SM64 API that attaches to a running emulator and can …\n32 bit float\n64 bit float\nA float type.\nA float value, regardless of the underlying <code>FloatType</code> size.\nFloat types of different sizes.\nAn integer value.\nAn SM64 API that uses a traditional frame advance / save …\nA set of inputs for a given frame.\nAn integer type.\nAn integer value, regardless of the underlying <code>IntType</code> …\nInteger types of different sizes and signedness.\nAn integer value.\nThe original Japanese release.\nMetadata for a .m64 TAS.\nThe NULL address.\nRepresents the lack of a value.\nHitbox information for an SM64 object.\nA pointer type.\nAn SM64 API that attaches to a running instance of libsm64 …\n16 bit signed int\n32 bit signed int\n64 bit signed int\n8 bit signed int\nShindou version.\nSM64 game versions.\nA save state used by Game.\nA string value.\nA struct type.\nA struct value.\nAn SM64 surface (currently missing several fields).\nAn SM64 API that allows reads and writes to arbitrary …\n16 bit unsigned int\n32 bit unsigned int\n64 bit unsigned int\n8 bit unsigned int\nUS version.\nA union type.\nA dynamically typed value.\nVoid, typically used as a pointer target or function …\nAdd a number of rerecords, saturating on overflow.\nFind the address of a path.\nFind the address of a path.\nFind the address of a path.\nFind the address of a path on the given frame.\nReturn the name of the global variable at the given …\nReturn the name of the global variable at the given …\nReturn the name of the global variable at the given …\nReturn the name of the global variable at the given …\nAdvance a single frame.\nAdvance multiple frames.\nReturn all game versions.\nConvert the value to an address, panicking on failure.\nConvert the value to an array and return its elements, …\nConvert the value to an array and return its elements, …\nConvert the value to a float, and then truncate to an f32, …\nConvert the value to an array of three f32s, panicking on …\nConvert the value to a float, panicking if the value is …\nConvert the value to a usize, allowing in-range integers.\nConvert the value to an array of three i16s, panicking on …\nConvert the value to an int, panicking if it is not an int.\nConvert the value to an int, allowing in-range floats that …\nPanic if the value is not <code>Value::None</code>.\nConvert the value to a string, panicking on failure.\nConvert the value to a struct and return its fields, …\nConvert the value to a usize, panicking on failure.\nAttach to a running emulator.\nAttach to a running instance of libsm64 in a different …\nGet the author field.\nPerform housekeeping to improve scrolling near hotspots.\nReturn the base address of the libsm64 DLL in memory.\nThe standard button bit flags.\nReturn the value of the macro constant or enum variant …\nReturn the value of the macro constant or enum variant …\nReturn the value of the macro constant or enum variant …\nReturn the value of the macro constant or enum variant …\nGet the country code.\nGet the CRC code.\nReturn a simplified description of the type of the given …\nReturn a simplified description of the type of the given …\nReturn a simplified description of the type of the given …\nReturn a simplified description of the type of the given …\nReturn a list of the frames that are currently loaded by …\nReturn the size of the data cache in bytes.\nDelete edits at the given frame, shifting all later edits …\nDelete a hotspot with the given name, if it exists.\nGet the description field.\nConvert the value to a struct and look up the field with …\nGet the frame of the current game state.\nReturn the frame that the save state was taken on.\nRead the Wafel frame log for the previous frame advance.\nRead the Wafel frame log for the previous frame advance.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe object’s hitbox height (hitboxHeight).\nThe object’s hitbox radius (hitboxRadius).\nShift all edits to the right, starting at the given frame.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the data type is an array type.\nReturn true if the data type is a float type.\nReturn true if the data type is an integer type.\nReturn true if the value is <code>Value::None</code>.\nReturns true if the address is not null (equal to zero).\nReturns true if the address is null (equal to zero).\nReturn true if the data type is a pointer type.\nReturn true if a process with the given pid is currently …\nReturn true if a process with the given pid is currently …\nReturn true if the data type is a struct type.\nReturn true if the data type is a union type.\nReturn true if the data type is void.\nLoad an m64 TAS from a file.\nLoad a save state.\nLock a libsm64 DLL so that it requires a ROM to open.\nReturn a mapping from Mario action values to their name …\nReturn a mapping from Mario action values to their name …\nReturn a mapping from Mario action values to their name …\nReturn a mapping from Mario action values to their name …\nLoad a libsm64 DLL.\nCreate a new metadata object with the given CRC and …\nLoad a libsm64 DLL.\nThe surface’s normal vector.\nRead the hitboxes for active objects.\nRead the hitboxes for active objects.\nRead the hitboxes for active objects.\nRead the hitboxes for active objects.\nReturn None if the value is none, and Some(self) otherwise.\nReturn the PID of the running process.\nThe object’s position (oPosX, oPosY, oPosZ).\nRead a value from memory.\nRead a value from memory.\nRead a value from memory.\nRead a value from memory on the given frame.\nRead a null terminated string from memory at the given …\nRead a null terminated string from memory at the given …\nRead a null terminated string from memory at the given …\nRead a null terminated string from memory on the given …\nRender the game to a VizScene object, which can be …\nRender the game to a VizScene object, which can be …\nRender the game to a VizScene object, which can be …\nRender the game to a VizScene object, which can be …\nReturn the number of times that a save state has been …\nGet the number of rerecords.\nClear all previous calls to write with the given <code>frame</code> and …\nClear all previous calls to write.\nSave an m64 TAS to a file.\nCreate a save state using the current game state.\nSet the author field (max 222 bytes).\nSets the camera, which determines the projection and view …\nSet the country code.\nSet the CRC code.\nSet the description field (max 256 bytes).\nSet a hotspot with a given name.\nSet the game’s controller input for the current frame …\nSet the game’s controller input for the given frame …\nSet the number of rerecords.\nSet the CRC and country code to match the given SM64 …\nSets the position and size of the viewport on the window, …\nReturns a signed int type with the given size in bytes.\nThe size of the int in bytes.\nThe size of the float in bytes.\nThe joystick x coordinate.\nThe joystick y coordinate.\nRead the currently loaded surfaces.\nRead the currently loaded surfaces.\nRead the currently loaded surfaces.\nRead the currently loaded surfaces.\nFind the address of a path.\nFind the address of a path.\nFind the address of a path.\nFind the address of a path on the given frame.\nConvert the value to an address.\nConvert the value to an array and return its elements.\nConvert the value to an array and return its elements.\nConvert the value to a float and then truncate to an f32.\nConvert the value to an array of three f32s.\nConvert the value to a float.\nConvert the value to a float, allowing in-range integers.\nConvert the value to an array of three i16s.\nConvert the value to an int.\nConvert the value to an int, allowing in-range floats that …\nReturn an error if the value is not <code>Value::None</code>.\nConvert the value to a string.\nConvert the value to a struct and return its fields.\nConvert the value to a usize.\nAttach to a running emulator.\nAttach to a running instance of libsm64 in a different …\nReturn the value of the macro constant or enum variant …\nReturn the value of the macro constant or enum variant …\nReturn the value of the macro constant or enum variant …\nReturn the value of the macro constant or enum variant …\nReturn a simplified description of the type of the given …\nReturn a simplified description of the type of the given …\nReturn a simplified description of the type of the given …\nReturn a simplified description of the type of the given …\nConvert the value to a struct and look up the field with …\nRead the Wafel frame log for the previous frame advance.\nRead the Wafel frame log for the previous frame advance.\nLoad an m64 TAS from a file.\nLoad a save state.\nLock a libsm64 DLL so that it requires a ROM to open.\nLoad a libsm64 DLL.\nLoad a libsm64 DLL.\nRead the hitboxes for active objects.\nRead the hitboxes for active objects.\nRead the hitboxes for active objects.\nRead the hitboxes for active objects.\nRead a value from memory.\nRead a value from memory.\nRead a value from memory.\nRead a value from memory on the given frame.\nRead a null terminated string from memory at the given …\nRead a null terminated string from memory at the given …\nRead a null terminated string from memory at the given …\nRead a null terminated string from memory on the given …\nRender the game to a VizScene object, which can be …\nRender the game to a VizScene object, which can be …\nRender the game to a VizScene object, which can be …\nRender the game to a VizScene object, which can be …\nClear all previous calls to write with the given <code>frame</code> and …\nSave an m64 TAS to a file.\nSet the author field (max 222 bytes).\nSet the description field (max 256 bytes).\nSet the game’s controller input for the current frame …\nSet the game’s controller input for the given frame …\nRead the currently loaded surfaces.\nRead the currently loaded surfaces.\nRead the currently loaded surfaces.\nRead the currently loaded surfaces.\nUnlock a libsm64 DLL using a ROM.\nWrite a value to memory.\nWrite a value to memory.\nWrite a value to memory.\nWrite a value on the given frame.\nReturn the type of the surface (floor/wall/ceiling).\nAn unsigned IntType with the same size as native usize.\nUnlock a libsm64 DLL using a ROM.\nReturns an unsigned int type with the given size in bytes.\nReturn the SM64 version with matching CRC and country …\nThe surface’s vertex coordinates.\nCreate a new metadata object using the CRC and country …\nWrite a value to memory.\nWrite a value to memory.\nWrite a value to memory.\nWrite a value on the given frame.")